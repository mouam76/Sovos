@{
    ViewBag.Title = "Home Page";
}
<h6>SEARCH TABLE</h6>
<div class="col-xs-12 no-gutters">
    <table id="search_table" class="display cell-border">
        <thead>
            <tr>
                <th>User Name</th>
                <th>Type</th>
                <th>Status</th>
                <th>Title</th>
                <th>Date Created</th>
            </tr>
            <tr class="dropdown-search-row">
                <th class="dropdownSearch"></th>
                <th class="dropdownSearch"></th>
                <th class="dropdownSearch"></th>
                <th class="dropdownSearch"></th>
                <th class="dropdownSearch"></th>
            </tr>
        </thead>
    </table>
</div>

@section scripts{
    <script>
        //$.fn.dataTable.enum(['Processing', 'Complete', 'Failed']);

        $('#search_table').DataTable(
            {
                bAutoWidth: false,
                pageLength: 25,
                "lengthMenu": [[10, 25, 50, -1], [25, 50, 100, 200]],
                serverSide: false,
                ordering: false,
                paging: true,
                responsive: true,
                async: false,
                columns: [
                    { "data": "UserName" },
                    { "data": "TypeEnum" },
                    { "data": "StatusEnum" },
                    { "data": "Title" },
                    { "data": "DateCreated", "render": function (d) { return moment(d).format("MM/DD/YYYY - hh:mm A") } }
                ],
                initComplete: function () {
                    this.api().columns('.dropdownSearch').every(function () {
                        var column = this;
                        var select = $('<select><option value=""></option></select>')
                            .appendTo($(column.header()).empty())
                            .on('change', function () {
                                var val = $.fn.dataTable.util.escapeRegex(
                                    $(this).val()
                                );

                                if (isNaN(Date.parse(val))) {
                                    column
                                        .search(val ? '^' + val : '', true, false)
                                        .draw();
                                } else {
                                    column
                                        .search(val ? '^' + val + '$' : '', true, false)
                                        .draw();
                                }

                            });
                        column.data().unique().sort().each(function (d, j) {
                            if (d != null) {
                                if (d.toString().includes("Date")) {
                                    var date = moment(d).format("MM/DD/YYYY");
                                    if (select.has('option:contains(' + date + ')').length == 0) {
                                        select.append('<option value="' + date + '">' + date + '</option>');
                                    }
                                } else {
                                    select.append('<option value="' + d + '">' + d + '</option>');
                                }
                            }
                        });
                    });
                },
                ajax: {
                    url: 'Home/GenerateDatatableData',
                    type: 'POST',
                    error: function (req, err) { console.log('my message: ' + err.toString()) }
                }
            });

        //(function ($) {
        //    var unique = 0;
        //    var types = $.fn.dataTable.ext.type;

        //    // Using form $.fn.dataTable.enum breaks at least YuiCompressor since enum is
        //    // a reserved word in JavaScript
        //    $.fn.dataTable['enum'] = function (arr) {
        //        var name = 'enum-' + (unique++);
        //        var lookup = window.Map ? new Map() : {};

        //        for (var i = 0, ien = arr.length; i < ien; i++) {
        //            lookup[arr[i]] = i;
        //        }

        //        // Add type detection
        //        types.detect.unshift(function (d) {
        //            return lookup[d] !== undefined ?
        //                name :
        //                null;
        //        });

        //        // Add sorting method
        //        types.order[name + '-pre'] = function (d) {
        //            return lookup[d].replace(/<.*?>/g, '');
        //        };
        //    };


        //})(jQuery);
    </script>
}